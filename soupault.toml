
# To learn about configuring soupault, visit https://www.soupault.app/reference-manual

[settings]
  # Soupault version that the config was written/generated for
  # Trying to process this config with an older version will result in an error message
  soupault_version = "4.10.0"

  # Stop on page processing errors?
  strict = true

  # Display progress?
  verbose = true

  # Display detailed debug output?
  debug = false

  # Where input files (pages and assets) are stored.
  site_dir = "."

  # Where the output goes
  build_dir = "build"

  ignore_directories = [
    ".git",
    ".soupault-cache",
    "templates", "plugins", "scripts", "node_modules",
    # Prevent Soupault from re-processing its outputs
    "build",
  ]

  ignore_path_regexes = [
    '/package\.json$', '/yarn\.lock$',
  ]

  # Page files with these extensions are ignored.
  ignore_extensions = ["swp", "nix", "toml", "gitignore", "piskel"]

  # Files inside the site/ directory can be treated as pages or static assets,
  # depending on the extension.
  #
  # Files with extensions from this list are considered pages and processed.
  # All other files are copied to build/ unchanged.
  #
  # Note that for formats other than HTML, you need to specify an external program
  # for converting them to HTML (see below).
  page_file_extensions = ["htm", "html", "md", "markdown", "rst", "adoc"]

  clean_urls = false

  # If you set clean_urls=false,
  # file names with ".html" and ".htm" extensions are left unchanged.
  keep_extensions = ["html", "htm"]

  # All other extensions (".md", ".rst"...) are replaced, by default with ".html"
  default_extension = "html"

  # Soupault can work as a website generator or an HTML processor.
  #
  # In the "website generator" mode, it considers files in site/ page bodies
  # and inserts them into the empty page template stored in templates/main.html
  #
  # Setting this option to false switches it to the "HTML processor" mode
  # when it considers every file in site/ a complete page and only runs it through widgets/plugins.
  generator_mode = true

  # Files that contain an <html> element are considered complete pages rather than page bodies,
  # even in the "website generator" mode.
  # This allows you to use a unique layout for some pages and still have them processed by widgets.
  complete_page_selector = "html"

  # Website generator mode requires a page template (an empty page to insert a page body into).
  # If you use "generator_mode = false", this file is not required.
  default_template_file = "templates/main.html"

  # Page content is inserted into a certain element of the page template.
  # This option is a CSS selector that is used for locating that element.
  # By default the content is inserted into the <body>
  default_content_selector = "article"

  # You can choose where exactly to insert the content in its parent element.
  # The default is append_child, but there are more, including prepend_child and replace_content
  default_content_action = "append_child"

  # If a page already has a document type declaration, keep the declaration
  keep_doctype = true

  # If a page does not have a document type declaration, force it to HTML5
  # With keep_doctype=false, soupault will replace existing declarations with it too
  doctype = "<!DOCTYPE html>"

  # Insert whitespace into HTML for better readability
  # When set to false, the original whitespace (if any) will be preserved as is
  pretty_print_html = false

  # Plugins can be either automatically discovered or loaded explicitly.
  # By default discovery is enabled and the place where soupault is looking is the plugins/ subdirectory
  # in your project.
  # E.g., a file at plugins/my-plugin.lua will be registered as a widget named "my-plugin".
  plugin_discovery = true
  plugin_dirs = ["plugins"]

  # Soupault can cache outputs of external programs
  # (page preprocessors and preprocess_element widget commands).
  # It's disabled by default but you can enable it and configure the cache directory name/path
  caching = true
  cache_dir = ".soupault-cache"

  # Soupault supports a variety of page source character encodings,
  # the default encoding is UTF-8
  page_character_encoding = "utf-8"
 
[asset_processors]
  build-gitignore = "cp {{source_file_path}} {{target_dir}}/.gitignore"

[preprocessors]
  md = "cmark --unsafe --smart"
  markdown = """\
    pandoc \
      --from markdown-auto_identifiers+lists_without_preceding_blankline-citations \
      --wrap=preserve \
      --to html\
  """

# Pages can be further processed with "widgets"

# Takes the content of the first <h1> and inserts it into the <title>
[widgets.page-title]
  widget = "title"
  selector = "h1"
  append = " &mdash; Christine's World Wide Web Site"

  # Insert a <title> in a page if it doesn't have one already.
  # By default soupault assumes if it's missing, you don't want it.
  force = false

[widgets.relativize]
  # Rewrite absolute paths to relative paths
  widget = "relative_links"

[widgets.highlight]
  widget = "preprocess_element"
  selector = '*[class^="language-"]'
  command = 'highlight -O html -f --syntax=${ATTR_CLASS#language-}'

[widgets.add-katex-css]
  widget = "insert-if"
  html = """\
    <link rel="stylesheet" \
          href="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css" \
          integrity="sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+" \
          crossorigin="anonymous">\
  """
  selector = "head"
  check_selector = "math"

[widgets.highlight-css]
  widget = "insert-if"
  html = """\
      <link rel="stylesheet" type="text/css" href="/highlight.css">\
  """
  selector = "head"
  check_selector = '*[class^="language-"]'

[widgets.inline-math]
  widget = "preprocess_element"
  selector = [ "p > math", "li > math", "figcaption > math" ]
  command = "node scripts/katex.js"
  action = "replace_element"
  after = "add-katex-css"

[widgets.display-math]
  widget = "preprocess_element"
  selector = "article > math"
  command = "KATEX_DISPLAY_MODE=1 node scripts/katex.js"
  action = "replace_element"
  after = "add-katex-css"

# Inserts a generator meta tag in the page <head>
# Just for demonstration, feel free to remove
[widgets.generator-meta]
  widget = "insert_html"
  html = '<meta name="generator" content="soupault">'
  selector = "head"
  after = "add-katex-css"
